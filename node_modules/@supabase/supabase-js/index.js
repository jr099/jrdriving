class SupabaseClient {
  constructor() {
    const authState = {
      session: null,
    };

    this.auth = {
      async getSession() {
        return { data: { session: authState.session }, error: null };
      },
      onAuthStateChange(callback) {
        const subscription = {
          unsubscribe() {
            /* no-op stub */
          },
        };
        if (typeof callback === 'function') {
          callback('INITIAL_SESSION', authState.session);
        }
        return { data: { subscription } };
      },
      async signInWithPassword() {
        return { data: { user: { id: 'stub-user' } }, error: null };
      },
      async signUp() {
        return { data: { user: { id: 'stub-user' } }, error: null };
      },
      async signOut() {
        authState.session = null;
        return { error: null };
      },
    };
  }

  from() {
    return {
      select() {
        return this;
      },
      eq() {
        return this;
      },
      maybeSingle() {
        return Promise.resolve({ data: null, error: null });
      },
      insert() {
        return {
          select() {
            return {
              single() {
                return Promise.resolve({ data: null, error: null });
              },
            };
          },
        };
      },
      upsert() {
        return Promise.resolve({ data: null, error: null });
      },
    };
  }
}

function createClient() {
  return new SupabaseClient();
}

module.exports = { createClient };
